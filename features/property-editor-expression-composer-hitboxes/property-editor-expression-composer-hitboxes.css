/* ❤️ */
/* Expression Composer Text Area */

/* Add a gap and (a heart) where static text may be input */
❤️ codelesslove,
.property-editor-2 .textcomposer-entry.dynamic-entry-reorg {
  display: inline;
}
❤️ codelesslove,
.property-editor-2 .text-entry.static-entry-reorg::after {
    content: "❤️";
    font-size: 3px;
    position: relative;
    right: 0;
    top: -2px;
    padding-right: 5px;
    line-height: 0;
    opacity: .8;
  }
/* When an expression box allows static text at the end, expand the static-text "hitbox" to the full width of the expression input. */
❤️ codelesslove,
.property-editor-2 .object-list-editor .entry {/* flexbox with wrapping so that the 3rd item wraps if it's wider than the available width */
  display: flex;
  flex-wrap: wrap;
}
❤️ codelesslove,
.property-editor-2 .object-list-editor .entry .row {
  display: inline-block;
  box-sizing: border-box;
  flex: 0 1 auto;
}
❤️ codelesslove,
.property-editor-2 .object-list-editor .entry .row[prop_name=value]{
 flex: 1 1 auto;
 position: relative;/* give the heart indicator something to be relative to.  */
}
/* This is the "hitbox" for the static text input. make sure it's full width. These are all inline elements, but putting a block-level element inside them snaps them out of it.  */
❤️ codelesslove,
.property-editor-2 .object-list-editor .entry .row[prop_name=value] .prop-row-contents .body .editor.shorttext .text-composer {
  display: block !important;
  width: 100% !important;
  top: -2px;
}
/* add heart indicator to the far-right of the hitbox to show it's clickable. */
❤️ codelesslove,
.property-editor-2 .object-list-editor .entry .row[prop_name=value] .prop-row-contents .body .editor.shorttext::after {
  content: "❤️";
  font-size: 3px;
  position: absolute;
  right: 0;
  top: 0;
  right: 0;
  opacity: .8;
}
